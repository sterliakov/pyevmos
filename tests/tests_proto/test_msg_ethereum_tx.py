from __future__ import annotations

import base64

from betterproto import casing

from evmos.proto import (
    bytes_to_auth_info,
    bytes_to_legacy_tx,
    bytes_to_msg_ethereum_tx,
    bytes_to_tx_body,
    bytes_to_tx_raw,
)

blockchain_tx = (
    "CroICoYICh8vZXRoZXJtaW50LmV2bS52MS5Nc2dFdGhlcmV1bVR4EuIHCpIHChovZXRoZXJtaW50"
    "LmV2bS52MS5MZWdhY3lUeBLzBgiMCBINNTAwMDAwMDAwMDAwMBiAn0kiKjB4NzUyYTIxYUI2M2Zj"
    "MkM3ODg3NzQ3ZTc1NDQwNWQ5NzVDRDM1MUQ1NCoBMDLkBaKr5U4AAAAAAAAAAAAAAAAAAAAAAAAA"
    "AAAAAIuIFFmETVNZmgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABbl+kIHZQAAAAAAAAAAAAAAAAAA"
    "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
    "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
    "AMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAAAAAAAAAAAAP5jeVCccTRCn3sK"
    "792m8rdNgra8AAAAAAAAAAAAAAAA4cEQ4bG0od7QyvPkK/vbt7XXzhwAAAAAAAAAAAAAAAAAAAAA"
    "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACbyAAAAAAAAAAAA"
    "AAAAAAAAAAAAAAAAAAAAAAAAAAAAJxAAAAAAAAAAAAAAAADjbNV4hCwlX2oYGChpFhFTFalMQAAA"
    "AAAAAAAAAAAAAMISIyScooOXtLZUHf+uzFOb/wxZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
    "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAm8gAAAAAAAAAAAAAAAAAAAAAAAAAA"
    "AAAAAAAAAAAAACcQAAAAAAAAAAAAAAAAGCQUFZw+7xQ1r5G88NEqvL4nekYAAAAAAAAAAAAAAABc"
    "f4pXDVeO2E5j/fp7Huct6uGuIwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
    "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJvIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAn"
    "EAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD//wAHOgFWQiBXQ6FNYBwVz4wVf5KpY7ldwXg3"
    "TnOCeO6xfcuzDA5JIEogNw+TTcQqXv3X+fyanCS4bDl3f3bHL5f7+T9UV9z/wckRAAAAAACIikAa"
    "QjB4ZmQxODk2ZWEwNzQ4MjllODQ1OGRlMjE2NjBkZjdiNTc3OWQzMzQ5Y2Y4YjA3YWU2ZmMxZmNh"
    "OTY3ZGRhNzRjY/o/LgosL2V0aGVybWludC5ldm0udjEuRXh0ZW5zaW9uT3B0aW9uc0V0aGVyZXVt"
    "VHgSJhIkCh4KB2Jhc2Vjcm8SEzYwMDAwMDAwMDAwMDAwMDAwMDAQgJ9J"
)


def test_bytes_to_msg_ethereum_tx_from_raw_tx():
    # Create txRaw
    tx_raw_proto = bytes_to_tx_raw(base64.b64decode(blockchain_tx))

    # Create body
    body_proto = bytes_to_tx_body(tx_raw_proto.body_bytes)

    # Create the authInfo
    auth_info_proto = bytes_to_auth_info(tx_raw_proto.auth_info_bytes)
    assert auth_info_proto.to_pydict(casing=casing.snake_case) == {
        "fee": {
            "amount": [{"amount": "6000000000000000000", "denom": "basecro"}],
            "gas_limit": 1200000,
        },
    }

    # Get the messages
    body_proto_messages = body_proto.messages
    assert body_proto_messages

    # Make sure that the message is MsgEthTx
    assert body_proto_messages[0].type_url == "/ethermint.evm.v1.MsgEthereumTx"

    # Create the MsgEthTx proto
    assert body_proto_messages[0].value
    msg_eth_tx = bytes_to_msg_ethereum_tx(
        body_proto_messages[0].value,
    )

    # Create the LegacyTx/AccessListTx/DynamicFeeTx depending on the type_url
    assert msg_eth_tx.data.type_url == "/ethermint.evm.v1.LegacyTx"

    # Create the LegacyTX
    # eth_tx = bytes_to_legacy_tx(msg_eth_tx.data?.value as Uint8Array).toObject()
    eth_tx = bytes_to_legacy_tx(msg_eth_tx.data.value)
    assert eth_tx.nonce == 1036
    assert eth_tx.gas_price == "5000000000000"
    assert eth_tx.gas == 1200000
    assert eth_tx.to == "0x752a21aB63fc2C7887747e754405d975CD351D54"

    assert eth_tx.value == "0"
    assert eth_tx.data == bytes.fromhex(
        "a2abe54e00000000000000000000000000000000000000000000008b881459844d53599a00000000"
        "000000000000000000000000000000000000000016e5fa4207650000000000000000000000000000"
        "00000000000000000000000000000000000000000000000000000000000000000000000000000000"
        "00000000000000000000000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000000c000000000"
        "00000000000000000000000000000000000000000000000000000003000000000000000000000000"
        "fe6379509c7134429f7b0aefdda6f2b74d82b6bc000000000000000000000000e1c110e1b1b4a1de"
        "d0caf3e42bfbdbb7b5d7ce1c00000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000026f200000000"
        "00000000000000000000000000000000000000000000000000002710000000000000000000000000"
        "e36cd578842c255f6a1818286916115315a94c40000000000000000000000000c21223249ca28397"
        "b4b6541dffaecc539bff0c5900000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000026f200000000"
        "00000000000000000000000000000000000000000000000000002710000000000000000000000000"
        "182414159c3eef1435af91bcf0d12abcbe277a460000000000000000000000005c7f8a570d578ed8"
        "4e63fdfa7b1ee72deae1ae2300000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000000000026f200000000"
        "00000000000000000000000000000000000000000000000000002710000000000000000000000000"
        "00000000000000000000000000000000ffff0007"
    )
