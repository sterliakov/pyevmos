# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: evmos/vesting/v2/events.proto, evmos/vesting/v2/query.proto, evmos/vesting/v2/tx.proto, evmos/vesting/v2/vesting.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from datetime import datetime
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from ....cosmos.base import v1beta1 as ___cosmos_base_v1_beta1__
from ....cosmos.vesting import v1beta1 as ___cosmos_vesting_v1_beta1__


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class EventCreateClawbackVestingAccount(betterproto.Message):
    """
    EventCreateClawbackVestingAccount defines the event type
    for creating a clawback vesting account
    """

    funder: str = betterproto.string_field(1)
    """funder is the address of the funder"""

    vesting_account: str = betterproto.string_field(2)
    """vesting_account is the address of the created vesting account"""


@dataclass(eq=False, repr=False)
class EventFundVestingAccount(betterproto.Message):
    """EventFundVestingAccount defines the event type for funding a vesting account"""

    funder: str = betterproto.string_field(1)
    """funder is the address of the funder"""

    coins: str = betterproto.string_field(2)
    """coins to be vested"""

    start_time: str = betterproto.string_field(3)
    """start_time is the time when the coins start to vest"""

    vesting_account: str = betterproto.string_field(5)
    """vesting_account is the address of the recipient"""


@dataclass(eq=False, repr=False)
class EventClawback(betterproto.Message):
    """EventClawback defines the event type for clawback"""

    funder: str = betterproto.string_field(1)
    """funder is the address of the funder"""

    account: str = betterproto.string_field(2)
    """account is the address of the account"""

    destination: str = betterproto.string_field(3)
    """destination is the address of the destination"""


@dataclass(eq=False, repr=False)
class EventUpdateVestingFunder(betterproto.Message):
    """
    EventUpdateVestingFunder defines the event type for updating the vesting funder
    """

    funder: str = betterproto.string_field(1)
    """funder is the address of the funder"""

    account: str = betterproto.string_field(2)
    """account is the address of the account"""

    new_funder: str = betterproto.string_field(3)
    """new_funder is the address of the new funder"""


@dataclass(eq=False, repr=False)
class QueryBalancesRequest(betterproto.Message):
    """QueryBalancesRequest is the request type for the Query/Balances RPC method."""

    address: str = betterproto.string_field(1)
    """address of the clawback vesting account"""


@dataclass(eq=False, repr=False)
class QueryBalancesResponse(betterproto.Message):
    """
    QueryBalancesResponse is the response type for the Query/Balances RPC
    method.
    """

    locked: List["___cosmos_base_v1_beta1__.Coin"] = betterproto.message_field(1)
    """locked defines the current amount of locked tokens"""

    unvested: List["___cosmos_base_v1_beta1__.Coin"] = betterproto.message_field(2)
    """unvested defines the current amount of unvested tokens"""

    vested: List["___cosmos_base_v1_beta1__.Coin"] = betterproto.message_field(3)
    """vested defines the current amount of vested tokens"""


@dataclass(eq=False, repr=False)
class MsgCreateClawbackVestingAccount(betterproto.Message):
    """
    MsgCreateClawbackVestingAccount defines a message that enables creating a
    ClawbackVestingAccount.
    """

    funder_address: str = betterproto.string_field(1)
    """
    funder_address specifies the account that will be able to fund the vesting account
    """

    vesting_address: str = betterproto.string_field(2)
    """vesting_address specifies the address that will receive the vesting tokens"""

    enable_gov_clawback: bool = betterproto.bool_field(3)
    """
    enable_gov_clawback specifies whether the governance module can clawback this
    account
    """


@dataclass(eq=False, repr=False)
class MsgCreateClawbackVestingAccountResponse(betterproto.Message):
    """
    MsgCreateClawbackVestingAccountResponse defines the
    MsgCreateClawbackVestingAccount response type.
    """

    pass


@dataclass(eq=False, repr=False)
class MsgFundVestingAccount(betterproto.Message):
    """
    MsgFundVestingAccount defines a message that enables funding an existing clawback
    vesting account.
    """

    funder_address: str = betterproto.string_field(1)
    """funder_address specifies the account that funds the vesting account"""

    vesting_address: str = betterproto.string_field(2)
    """vesting_address specifies the account that receives the funds"""

    start_time: datetime = betterproto.message_field(3)
    """start_time defines the time at which the vesting period begins"""

    lockup_periods: List["___cosmos_vesting_v1_beta1__.Period"] = (
        betterproto.message_field(4)
    )
    """lockup_periods defines the unlocking schedule relative to the start_time"""

    vesting_periods: List["___cosmos_vesting_v1_beta1__.Period"] = (
        betterproto.message_field(5)
    )
    """vesting_periods defines the vesting schedule relative to the start_time"""


@dataclass(eq=False, repr=False)
class MsgFundVestingAccountResponse(betterproto.Message):
    """
    MsgFundVestingAccountResponse defines the
    MsgFundVestingAccount response type.
    """

    pass


@dataclass(eq=False, repr=False)
class MsgClawback(betterproto.Message):
    """
    MsgClawback defines a message that removes unvested tokens from a
    ClawbackVestingAccount.
    """

    funder_address: str = betterproto.string_field(1)
    """funder_address is the address which funded the account"""

    account_address: str = betterproto.string_field(2)
    """
    account_address is the address of the ClawbackVestingAccount to claw back
    from.
    """

    dest_address: str = betterproto.string_field(3)
    """
    dest_address specifies where the clawed-back tokens should be transferred
    to. If empty, the tokens will be transferred back to the original funder of
    the account.
    """


@dataclass(eq=False, repr=False)
class MsgClawbackResponse(betterproto.Message):
    """MsgClawbackResponse defines the MsgClawback response type."""

    coins: List["___cosmos_base_v1_beta1__.Coin"] = betterproto.message_field(1)
    """coins is the slice of clawed back coins"""


@dataclass(eq=False, repr=False)
class MsgUpdateVestingFunder(betterproto.Message):
    """
    MsgUpdateVestingFunder defines a message that updates the funder account of a
    ClawbackVestingAccount.
    """

    funder_address: str = betterproto.string_field(1)
    """funder_address is the current funder address of the ClawbackVestingAccount"""

    new_funder_address: str = betterproto.string_field(2)
    """new_funder_address is the new address to replace the existing funder_address"""

    vesting_address: str = betterproto.string_field(3)
    """vesting_address is the address of the ClawbackVestingAccount being updated"""


@dataclass(eq=False, repr=False)
class MsgUpdateVestingFunderResponse(betterproto.Message):
    """
    MsgUpdateVestingFunderResponse defines the MsgUpdateVestingFunder response
    type.
    """

    pass


@dataclass(eq=False, repr=False)
class MsgConvertVestingAccount(betterproto.Message):
    """
    MsgConvertVestingAccount defines a message that enables converting a vesting account
    to an eth account
    """

    vesting_address: str = betterproto.string_field(1)
    """vesting_address is the address of the vesting account to convert"""


@dataclass(eq=False, repr=False)
class MsgConvertVestingAccountResponse(betterproto.Message):
    """
    MsgConvertVestingAccountResponse defines the MsgConvertVestingAccount response type.
    """

    pass


@dataclass(eq=False, repr=False)
class ClawbackVestingAccount(betterproto.Message):
    """
    ClawbackVestingAccount implements the VestingAccount interface. It provides
    an account that can hold contributions subject to "lockup" (like a
    PeriodicVestingAccount), or vesting which is subject to clawback
    of unvested tokens, or a combination (tokens vest, but are still locked).
    """

    base_vesting_account: "___cosmos_vesting_v1_beta1__.BaseVestingAccount" = (
        betterproto.message_field(1)
    )
    """
    base_vesting_account implements the VestingAccount interface. It contains
    all the necessary fields needed for any vesting account implementation
    """

    funder_address: str = betterproto.string_field(2)
    """funder_address specifies the account which can perform clawback"""

    start_time: datetime = betterproto.message_field(3)
    """start_time defines the time at which the vesting period begins"""

    lockup_periods: List["___cosmos_vesting_v1_beta1__.Period"] = (
        betterproto.message_field(4)
    )
    """lockup_periods defines the unlocking schedule relative to the start_time"""

    vesting_periods: List["___cosmos_vesting_v1_beta1__.Period"] = (
        betterproto.message_field(5)
    )
    """vesting_periods defines the vesting schedule relative to the start_time"""


@dataclass(eq=False, repr=False)
class ClawbackProposal(betterproto.Message):
    """
    ClawbackProposal is a gov Content type to clawback funds
    from a vesting account that has this functionality enabled.
    """

    title: str = betterproto.string_field(1)
    """title of the proposal"""

    description: str = betterproto.string_field(2)
    """description of the proposal"""

    address: str = betterproto.string_field(3)
    """
    address is the vesting account address
    to clawback the funds from
    """

    destination_address: str = betterproto.string_field(4)
    """
    destination_address is the address that will receive
    the clawbacked funds from the given vesting account. When
    empty, proposal will return the coins to the vesting
    account funder.
    """


class QueryStub(betterproto.ServiceStub):
    async def balances(
        self,
        query_balances_request: "QueryBalancesRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "QueryBalancesResponse":
        return await self._unary_unary(
            "/evmos.vesting.v2.Query/Balances",
            query_balances_request,
            QueryBalancesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class MsgStub(betterproto.ServiceStub):
    async def create_clawback_vesting_account(
        self,
        msg_create_clawback_vesting_account: "MsgCreateClawbackVestingAccount",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "MsgCreateClawbackVestingAccountResponse":
        return await self._unary_unary(
            "/evmos.vesting.v2.Msg/CreateClawbackVestingAccount",
            msg_create_clawback_vesting_account,
            MsgCreateClawbackVestingAccountResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fund_vesting_account(
        self,
        msg_fund_vesting_account: "MsgFundVestingAccount",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "MsgFundVestingAccountResponse":
        return await self._unary_unary(
            "/evmos.vesting.v2.Msg/FundVestingAccount",
            msg_fund_vesting_account,
            MsgFundVestingAccountResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def clawback(
        self,
        msg_clawback: "MsgClawback",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "MsgClawbackResponse":
        return await self._unary_unary(
            "/evmos.vesting.v2.Msg/Clawback",
            msg_clawback,
            MsgClawbackResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_vesting_funder(
        self,
        msg_update_vesting_funder: "MsgUpdateVestingFunder",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "MsgUpdateVestingFunderResponse":
        return await self._unary_unary(
            "/evmos.vesting.v2.Msg/UpdateVestingFunder",
            msg_update_vesting_funder,
            MsgUpdateVestingFunderResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def convert_vesting_account(
        self,
        msg_convert_vesting_account: "MsgConvertVestingAccount",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "MsgConvertVestingAccountResponse":
        return await self._unary_unary(
            "/evmos.vesting.v2.Msg/ConvertVestingAccount",
            msg_convert_vesting_account,
            MsgConvertVestingAccountResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class QueryBase(ServiceBase):
    async def balances(
        self, query_balances_request: "QueryBalancesRequest"
    ) -> "QueryBalancesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_balances(
        self,
        stream: "grpclib.server.Stream[QueryBalancesRequest, QueryBalancesResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.balances(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/evmos.vesting.v2.Query/Balances": grpclib.const.Handler(
                self.__rpc_balances,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryBalancesRequest,
                QueryBalancesResponse,
            ),
        }


class MsgBase(ServiceBase):
    async def create_clawback_vesting_account(
        self, msg_create_clawback_vesting_account: "MsgCreateClawbackVestingAccount"
    ) -> "MsgCreateClawbackVestingAccountResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fund_vesting_account(
        self, msg_fund_vesting_account: "MsgFundVestingAccount"
    ) -> "MsgFundVestingAccountResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def clawback(self, msg_clawback: "MsgClawback") -> "MsgClawbackResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_vesting_funder(
        self, msg_update_vesting_funder: "MsgUpdateVestingFunder"
    ) -> "MsgUpdateVestingFunderResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def convert_vesting_account(
        self, msg_convert_vesting_account: "MsgConvertVestingAccount"
    ) -> "MsgConvertVestingAccountResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_create_clawback_vesting_account(
        self,
        stream: "grpclib.server.Stream[MsgCreateClawbackVestingAccount, MsgCreateClawbackVestingAccountResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_clawback_vesting_account(request)
        await stream.send_message(response)

    async def __rpc_fund_vesting_account(
        self,
        stream: "grpclib.server.Stream[MsgFundVestingAccount, MsgFundVestingAccountResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.fund_vesting_account(request)
        await stream.send_message(response)

    async def __rpc_clawback(
        self, stream: "grpclib.server.Stream[MsgClawback, MsgClawbackResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.clawback(request)
        await stream.send_message(response)

    async def __rpc_update_vesting_funder(
        self,
        stream: "grpclib.server.Stream[MsgUpdateVestingFunder, MsgUpdateVestingFunderResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_vesting_funder(request)
        await stream.send_message(response)

    async def __rpc_convert_vesting_account(
        self,
        stream: "grpclib.server.Stream[MsgConvertVestingAccount, MsgConvertVestingAccountResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.convert_vesting_account(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/evmos.vesting.v2.Msg/CreateClawbackVestingAccount": grpclib.const.Handler(
                self.__rpc_create_clawback_vesting_account,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgCreateClawbackVestingAccount,
                MsgCreateClawbackVestingAccountResponse,
            ),
            "/evmos.vesting.v2.Msg/FundVestingAccount": grpclib.const.Handler(
                self.__rpc_fund_vesting_account,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgFundVestingAccount,
                MsgFundVestingAccountResponse,
            ),
            "/evmos.vesting.v2.Msg/Clawback": grpclib.const.Handler(
                self.__rpc_clawback,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgClawback,
                MsgClawbackResponse,
            ),
            "/evmos.vesting.v2.Msg/UpdateVestingFunder": grpclib.const.Handler(
                self.__rpc_update_vesting_funder,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgUpdateVestingFunder,
                MsgUpdateVestingFunderResponse,
            ),
            "/evmos.vesting.v2.Msg/ConvertVestingAccount": grpclib.const.Handler(
                self.__rpc_convert_vesting_account,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgConvertVestingAccount,
                MsgConvertVestingAccountResponse,
            ),
        }
