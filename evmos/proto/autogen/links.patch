diff --git b/evmos/proto/autogen/py/cosmos/crypto/secp256r1/__init__.py a/evmos/proto/autogen/py/cosmos/crypto/secp256r1/__init__.py
index ab76a88..6e963e7 100644
--- b/evmos/proto/autogen/py/cosmos/crypto/secp256r1/__init__.py
+++ a/evmos/proto/autogen/py/cosmos/crypto/secp256r1/__init__.py
@@ -14,7 +14,7 @@ class PubKey(betterproto.Message):
     key: bytes = betterproto.bytes_field(1)
     """
     Point on secp256r1 curve in a compressed representation as specified in section
-    4.3.6 of ANSI X9.62: https://webstore.ansi.org/standards/ascx9/ansix9621998
+    4.3.6 of ANSI X9.62: https://webstore.ansi.org/Standards/ASCX9/ansix9621998.
     """


diff --git b/evmos/proto/autogen/py/google/api/__init__.py a/evmos/proto/autogen/py/google/api/__init__.py
index 4e127dc..72500e5 100644
--- b/evmos/proto/autogen/py/google/api/__init__.py
+++ a/evmos/proto/autogen/py/google/api/__init__.py
@@ -210,7 +210,7 @@ class HttpRule(betterproto.Message):
     characters except `[-_.~/0-9a-zA-Z]` are percent-encoded. Such variables
     show up in the Discovery Document as `{+var}`.
     NOTE: While the single segment variable matches the semantics of
-    [RFC 6570](https://tools.ietf.org/html/rfc6570) Section 3.2.2
+    `RFC 6570 <https://www.rfc-editor.org/rfc/rfc6570>`_ Section 3.2.2
     Simple String Expansion, the multi segment variable **does not** match
     RFC 6570 Reserved Expansion. The reason is that the Reserved Expansion
     does not expand special characters like `?` and `#`, which would lead
diff --git b/evmos/proto/autogen/py/ibc/applications/interchain_accounts/v1/__init__.py a/evmos/proto/autogen/py/ibc/applications/interchain_accounts/v1/__init__.py
index 961938d..762470a 100644
--- b/evmos/proto/autogen/py/ibc/applications/interchain_accounts/v1/__init__.py
+++ a/evmos/proto/autogen/py/ibc/applications/interchain_accounts/v1/__init__.py
@@ -31,7 +31,7 @@ class Metadata(betterproto.Message):
     """
     Metadata defines a set of protocol specific data encoded into the ICS27
     channel version bytestring See ICS004:
-    https://github.com/cosmos/ibc/tree/master/spec/core/ics-004-channel-and-packet-semantics#Versioning
+    https://github.com/cosmos/ibc/tree/main/spec/core/ics-004-channel-and-packet-semantics
     """

     version: str = betterproto.string_field(1)
diff --git b/evmos/proto/autogen/py/ibc/applications/transfer/v1/__init__.py a/evmos/proto/autogen/py/ibc/applications/transfer/v1/__init__.py
index de8b747..5630df7 100644
--- b/evmos/proto/autogen/py/ibc/applications/transfer/v1/__init__.py
+++ a/evmos/proto/autogen/py/ibc/applications/transfer/v1/__init__.py
@@ -166,7 +166,7 @@ class MsgTransfer(betterproto.Message):
     """
     MsgTransfer defines a msg to transfer fungible tokens (i.e Coins) between
     ICS20 enabled chains. See ICS Spec here:
-    https://github.com/cosmos/ibc/tree/master/spec/app/ics-020-fungible-token-transfer#data-structures
+    https://github.com/cosmos/ibc/tree/main/spec/app/ics-020-fungible-token-transfer
     """

     source_port: str = betterproto.string_field(1)
diff --git b/evmos/proto/autogen/py/ibc/applications/transfer/v2/__init__.py a/evmos/proto/autogen/py/ibc/applications/transfer/v2/__init__.py
index b3d6f03..347158e 100644
--- b/evmos/proto/autogen/py/ibc/applications/transfer/v2/__init__.py
+++ a/evmos/proto/autogen/py/ibc/applications/transfer/v2/__init__.py
@@ -12,7 +12,7 @@ class FungibleTokenPacketData(betterproto.Message):
     """
     FungibleTokenPacketData defines a struct for the packet payload
     See FungibleTokenPacketData spec:
-    https://github.com/cosmos/ibc/tree/master/spec/app/ics-020-fungible-token-transfer#data-structures
+    https://github.com/cosmos/ibc/blob/main/spec/app/ics-020-fungible-token-transfer/README.md
     """

     denom: str = betterproto.string_field(1)
diff --git b/evmos/proto/autogen/py/ibc/core/channel/v1/__init__.py a/evmos/proto/autogen/py/ibc/core/channel/v1/__init__.py
index 2435714..16e928d 100644
--- b/evmos/proto/autogen/py/ibc/core/channel/v1/__init__.py
+++ a/evmos/proto/autogen/py/ibc/core/channel/v1/__init__.py
@@ -203,7 +203,7 @@ class Acknowledgement(betterproto.Message):
     conflicts with other protobuf message formats used for acknowledgements.
     The first byte of any message with this format will be the non-ASCII values
     `0xaa` (result) or `0xb2` (error). Implemented as defined by ICS:
-    https://github.com/cosmos/ibc/tree/master/spec/core/ics-004-channel-and-packet-semantics#acknowledgement-envelope
+    https://github.com/cosmos/ibc/tree/main/spec/core/ics-004-channel-and-packet-semantics
     """

     result: bytes = betterproto.bytes_field(21, group='response')
diff --git b/evmos/proto/autogen/py/tendermint/types/__init__.py a/evmos/proto/autogen/py/tendermint/types/__init__.py
index 42e7137..0ac64b3 100644
--- b/evmos/proto/autogen/py/tendermint/types/__init__.py
+++ a/evmos/proto/autogen/py/tendermint/types/__init__.py
@@ -260,8 +260,7 @@ class EvidenceParams(betterproto.Message):
     """
     Max age of evidence, in time.
     It should correspond with an app's "unbonding period" or other similar
-    mechanism for handling [Nothing-At-Stake
-    attacks](https://github.com/ethereum/wiki/wiki/Proof-of-Stake-FAQ#what-is-the-nothing-at-stake-problem-and-how-can-it-be-fixed).
+    mechanism for handling Nothing-At-Stake attacks.
     """

     max_bytes: int = betterproto.int64_field(3)
